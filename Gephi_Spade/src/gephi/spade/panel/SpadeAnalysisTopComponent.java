/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gephi.spade.panel;

import java.awt.Container;
import org.gephi.preview.api.*;
import org.gephi.preview.types.*;
import java.awt.Color;
import java.io.FileNotFoundException;
import org.gephi.preview.*;
import java.io.FileReader;
import java.io.Reader;
import org.gephi.graph.api.*;
import org.gephi.project.api.ProjectController;
import org.openide.util.Lookup;
import org.gephi.visualization.apiimpl.ModelImpl;
import java.io.*;
import java.util.*;
import org.gephi.graph.api.*;
import org.gephi.layout.plugin.random.*;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.gephi.io.importer.plugin.file.ImporterBuilderGML;
import org.gephi.io.importer.plugin.file.ImporterGML;
import org.gephi.io.importer.spi.FileImporter;
import javax.swing.*;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.io.generator.plugin.RandomGraph;
import org.gephi.io.importer.api.ContainerLoader;
import org.gephi.io.importer.api.ImportController;
import org.gephi.io.processor.plugin.DefaultProcessor;
import org.gephi.project.api.ProjectController;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.*;
import org.gephi.data.attributes.api.*;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.datalab.api.AttributeColumnsController;
import org.gephi.graph.api.Node;
import org.gephi.io.importer.api.ContainerFactory;
import org.gephi.io.importer.api.NodeDraft;
import org.gephi.project.api.Project;
import org.gephi.visualization.VizController;
import processing.core.PApplet;
import org.gephi.visualization.opengl.*;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//gephi.spade.panel//SpadeAnalysis//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SpadeAnalysisTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "rankingmode", openAtStartup = true)
@ActionID(category = "Window", id = "gephi.spade.panel.SpadeAnalysisTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SpadeAnalysisAction",
        preferredID = "SpadeAnalysisTopComponent"
)
@Messages({
    "CTL_SpadeAnalysisAction=SpadeAnalysis",
    "CTL_SpadeAnalysisTopComponent=SpadeAnalysis Window",
    "HINT_SpadeAnalysisTopComponent=This is a SpadeAnalysis window"
})
public final class SpadeAnalysisTopComponent extends TopComponent {

  
    private javax.swing.JTextField jTextField1;
    public SpadeAnalysisTopComponent() {
        initComponents();
        setName(Bundle.CTL_SpadeAnalysisTopComponent());
        setToolTipText(Bundle.HINT_SpadeAnalysisTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        List<String> results = new ArrayList<String>();
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setCurrentDirectory(new java.io.File("."));
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                +  jFileChooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                +  jFileChooser.getSelectedFile());
        }
        else {
            System.out.println("No Selection ");
        }
        File[] filesInDirectory = jFileChooser.getCurrentDirectory().listFiles();

        //Object[] gmlfiles = file.listFiles();
        javax.swing.JComboBox<File> jComboBox1 = new javax.swing.JComboBox<File>();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jComboBox1.setToolTipText(org.openide.util.NbBundle.getMessage(SpadeAnalysisTopComponent.class, "SpadeAnalysisTopComponent.jComboBox1.toolTipText")); // NOI18N
        for ( File file : filesInDirectory ) {
            if (!file.isDirectory()){
                jComboBox1.addItem(file);
            }

        }

        jComboBox1.setSelectedItem(null);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SpadeAnalysisTopComponent.class, "SpadeAnalysisTopComponent.jLabel1.text")); // NOI18N

        jTextField2.setEditable(false);
        jTextField2.setText(org.openide.util.NbBundle.getMessage(SpadeAnalysisTopComponent.class, "SpadeAnalysisTopComponent.jTextField2.text")); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(SpadeAnalysisTopComponent.class, "SpadeAnalysisTopComponent.jButton1.text")); // NOI18N
        jButton1.setToolTipText(org.openide.util.NbBundle.getMessage(SpadeAnalysisTopComponent.class, "SpadeAnalysisTopComponent.jButton1.toolTipText")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, 442, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(483, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        JComboBox<File> comboBox = (JComboBox<File>) evt.getSource();
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.newProject();
        org.gephi.project.api.Workspace workspace = pc.getCurrentWorkspace();
       
        //Generate a random graph
        org.gephi.io.importer.api.Container container = Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
       
        RandomGraph randomGraph = new RandomGraph();
        
        //randomGraph.setNumberOfNodes(50);
        //randomGraph.setWiringProbability(0.005);
        randomGraph.generate(container.getLoader());
        
        //Append imported data to GraphAPI
        ImportController importController = Lookup.getDefault().lookup(ImportController.class);
        NodeDraft nd = Lookup.getDefault().lookup(NodeDraft.class);
        AttributeColumnsController acc = Lookup.getDefault().lookup(AttributeColumnsController.class);
        AttributeController atCon = Lookup.getDefault().lookup(AttributeController.class);
        
        
            try{
                
                importController.process(importController.importFile((File)comboBox.getSelectedItem()), new DefaultProcessor(), workspace);
                
            }catch (FileNotFoundException fex){}
        //importController.process(container, new DefaultProcessor(), workspace);
            
        AttributeModel model = atCon.getModel(workspace);
        AttributeTable at = model.getNodeTable();
        AttributeColumn[] columns = at.getColumns();
        
        for (AttributeColumn col : columns){
            if (acc.canDeleteColumn(col)){
                String originalTitle = col.getTitle();
                //acc.duplicateColumn(at, col, TOOL_TIP_TEXT_KEY, AttributeType.DYNAMIC_FLOAT);
                AttributeColumn tempCol = acc.duplicateColumn(at, col, "temp", AttributeType.FLOAT);
                acc.deleteAttributeColumn(at, col);
                acc.duplicateColumn(at, tempCol, originalTitle, AttributeType.FLOAT);
                acc.deleteAttributeColumn(at, tempCol);
            }
        }
        
        //AttributeController ac = Lookup.getDefault().lookup(AttributeController.class);
        GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();
        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);
        
        PreviewModel previewModel = previewController.getModel();
        previewModel.getProperties().putValue(PreviewProperty.SHOW_NODE_LABELS, Boolean.TRUE);
        previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_COLOR, new DependantOriginalColor(Color.RED));
        previewModel.getProperties().putValue(PreviewProperty.EDGE_CURVED, Boolean.TRUE);
        previewModel.getProperties().putValue(PreviewProperty.EDGE_OPACITY, 50);
        previewModel.getProperties().putValue(PreviewProperty.EDGE_RADIUS, 10f);
        previewModel.getProperties().putValue(PreviewProperty.BACKGROUND_COLOR, Color.BLACK);
        previewController.refreshPreview();
        
        
        

            //Refresh the preview and reset the zoom
     
        /*
        
        ImportController ic = Lookup.getDefault().lookup(ImportController.class);
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        FileImporter fi = ic.getFileImporter((File) comboBox.getSelectedItem());
        try{
        ic.importFile((File) comboBox.getSelectedItem());
        }catch(Exception ex){}
        
        /*
        pc.newProject();
        org.gephi.project.api.Workspace ws = pc.getCurrentWorkspace();
        
        try{
            container = (Container) ic.importFile((File) comboBox.getSelectedItem());
            //ic.process((org.gephi.io.importer.api.Container) container, new DefaultProcessor(), ws);
            //Reader reader = new FileReader(file);
        }catch (FileNotFoundException fnfe){}
        
        */
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ArrayList<Node> selectedNodes = new ArrayList<Node>();
        ModelImpl[] model = Lookup.getDefault().lookup(ModelImpl[].class);
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        org.gephi.project.api.Workspace workspace = pc.getCurrentWorkspace();
        
        GraphController gc = Lookup.getDefault().lookup(GraphController.class);
        GraphModel gm = gc.getModel(workspace);
        Graph graph = gm.getGraph();
       
        jTextField2.setText(Integer.toString(graph.getNodeCount()));
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        /*
        JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //int returnValue = jFileChooser.showOpenDialog(jFileChooser);
            //if (returnValue == JFileChooser.APPROVE_OPTION) {
                try {
                spadeCxt.setPath(jFileChooser.getSelectedFile());
                } catch (IllegalArgumentException ex) {
                    JOptionPane.showMessageDialog(null, "Invalid directory: " + ex.getMessage());
                    return;
                }
                
                // Fill in Directory Text Field
                jTextField1.setText(spadeCxt.getPath().getPath());

                //If the selected directory is a processed output directory,
                //open the analysis pane immediately
                SpadeContext.WorkflowKind wk = spadeCxt.getWorkflowKind();
              /*  
            } else if (returnValue == JFileChooser.CANCEL_OPTION) {
                return;
            } else {
                JOptionPane.showMessageDialog(null, "File selection error");
                return;
            }
        
        Reader reader;
        ImporterBuilderGML ibgml = new ImporterBuilderGML();
        FileImporter igml = (ImporterGML) ibgml.buildImporter();
       
        try {
            reader = new FileReader(spadeCxt.getPath().getPath());
            igml.setReader(reader);
            igml.execute(null);
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
        */       
    }
    

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
